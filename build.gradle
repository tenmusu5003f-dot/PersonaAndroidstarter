plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.persona.app'
    compileSdk 34

    defaultConfig {
        applicationId "com.persona.app"
        minSdk 26
        targetSdk 34
        versionCode 46
        versionName "4.6"
        vectorDrawables {
            useSupportLibrary true
        }
        // Only bundle locales actually used (can add others later from settings)
        resourceConfigurations += ["ja", "en"]
    }

    buildTypes {
        analyze {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-why.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Keep shrink OFF in debug for faster dev; still allow quick size test via ./gradlew minifyDebug
            minifyEnabled false
            shrinkResources false
        }
    }

    // Split APKs to reduce download size for sideload; AAB will auto-split on Play
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a' // most devices; add 'armeabi-v7a' if必要
            universalApk false
        }
        density {
            enable true
            compatibleScreens 'small','normal','large','xlarge'
        }
        language {
            enable true
        }
    }

    packagingOptions {
        resources {
            excludes += [
                'META-INF/LICENSE*',
                'META-INF/NOTICE*',
                'META-INF/*.kotlin_module',
                'META-INF/AL2.0',
                'META-INF/LGPL2.1'
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            "-Xjvm-default=all"
        ]
    }
    buildFeatures {
        buildConfig false
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.10'
    }
    // Enable resource shrinker new mode (paired with gradle.properties line)
    androidResources {
        crunchPngs true
    }
}

dependencies {
    implementation platform('androidx.compose:compose-bom:2024.09.00')
    implementation 'androidx.activity:activity-compose:1.9.2'
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.3.0'
    implementation 'androidx.datastore:datastore-preferences:1.1.1'
    implementation 'androidx.work:work-runtime-ktx:2.9.1'
    implementation 'com.google.android.gms:play-services-location:21.3.0'

    debugImplementation 'androidx.compose.ui:ui-tooling'
}


tasks.register("convertPngToWebp") {
    group = "optimize"
    description = "Convert PNGs under res/ to lossy WebP (requires cwebp in PATH)"
    doLast {
        println("Converting PNGs to WebP...")
        exec {
            executable "python3"
            args "tools/convert_to_webp.py", "app/src/main/res"
            isIgnoreExitValue = true
        }
    }
}


tasks.matching { it.name == "preBuild" }.configureEach {
    dependsOn("convertPngToWebp")
}


tasks.register("sizeReport") {
    group = "optimize"
    description = "Show top big files and sizes by type"
    doLast {
        exec {
            executable "python3"
            args "tools/size_report.py", project.rootDir.toString()
            isIgnoreExitValue = true
        }
    }
}

tasks.register("cleanPreviews") {
    group = "optimize"
    description = "Delete *Preview.kt and *Sample*.kt under src (use with care)"
    doLast {
        exec {
            executable "python3"
            args "tools/clean_debug_previews.py", "app/src"
            isIgnoreExitValue = true
        }
    }
}


tasks.register("convertImages") {
    group = "optimize"
    description = "Downscale large PNGs and convert to WebP (requires Pillow + cwebp)"
    doLast {
        println("Downscaling & converting images...")
        exec {
            executable "python3"
            args "tools/convert_images.py", "app/src/main/res"
            isIgnoreExitValue = true
        }
    }
}
tasks.matching { it.name == "preBuild" }.configureEach {
    dependsOn("convertImages")
}
